import { Redirect } from '@reach/router';
import { Field, Form, Formik, FormikHelpers, FormikProps } from 'formik';
import { Link, PageProps } from 'gatsby';
import { parse, stringifyUrl } from 'query-string';
import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';
import { useTranslation } from 'react-i18next';
import * as Yup from 'yup';
import { Btn } from '../../../components/Elements';
import { useAuth } from '../../../context/auth';
import { AllRegistrationFormValues } from '../../../context/auth/AuthProvider';
import { useLocationData } from '../../../context/location-data';
import { usePresignup } from '../../../context/presignup';
import { useReferral } from '../../../context/referral';
import { SideCaptionImagePage } from '../../Layout';
import * as SideImageFormPageStyles from '../../Layout/SideImageFormPage/styles';
import * as S from './styles';

const RegisterPage: React.FC<PageProps<{}>> = ({ location, navigate }) => {
  const { t } = useTranslation();
  const [registerFailed, setRegisterFailed] = useState(false);
  const [errorMessage, setErrorMessage] = useState('');
  const { isAuthenticated, register } = useAuth();
  const { ipLocationData } = useLocationData();
  const { savedEmail } = usePresignup();
  const { referralUser, setReferralCode, referralCode } = useReferral();
  const unmounted = useRef(false);

  // use the useEffect cleanup function to know if the component (page) was unmounted
  // so we don't update the state afterwards and thereby introduce a memory leak
  useEffect(
    () => () => {
      unmounted.current = true;
    },
    []
  );

  // gc stands for `gift code` and comes from links generated by purchasing a subscription plan as a gift (see /gifting)
  const { from, gc }: { from?: string; gc?: string } = useMemo(() => parse(location.search), [
    location.search,
  ]);

  const loginPagePath = useMemo(() => stringifyUrl({ url: '/login', query: { from } }), [from]);

  const onSubmit = useCallback(
    async (formValues: RegisterFormValues, formikHelpers: FormikHelpers<RegisterFormValues>) => {
      setErrorMessage('');
      setRegisterFailed(false);

      if (ipLocationData && formValues.zipcode == null) {
        formValues.zipcode = ipLocationData.zip_code;
      }

      if (referralUser) {
        formValues.referredBy = referralUser.id;
      }

      if (ipLocationData) {
        formValues.ip_address = ipLocationData.ip;
        formValues.country_code = ipLocationData.country_code.toLowerCase();
      }

      const allRegistrationFormValues: AllRegistrationFormValues = {
        ...formValues,
        username: formValues.email,
        personalized_newsletter_optIn: true,
      };

      const { success, errorMessage } = await register(allRegistrationFormValues);

      if (!unmounted.current) {
        setRegisterFailed(!success);
        if (!success) {
          formikHelpers.setSubmitting(false);
          if (errorMessage) {
            setErrorMessage(errorMessage);
          }
        } else if (from) {
          navigate(from);
        } else {
          ttq.track('CompleteRegistration');
          navigate('/app/phone/edit');
        }
      }
    },
    [ipLocationData, referralUser, register, from, navigate]
  );

  // TODO: use graphql for image

  const initialValues: RegisterFormValues = useMemo(
    () => ({
      first_name: '',
      last_name: '',
      email: savedEmail || '',
      password: '',
      zipcode: ipLocationData?.zip_code || '',
      gift_code: gc || '',
      referral_code: referralCode || '',
    }),
    [gc, ipLocationData?.zip_code, savedEmail, referralCode]
  );

  if (isAuthenticated) {
    return <Redirect noThrow to={from || '/app/invite'} />;
  }

  const validateReferralUser = async (referral_code: string) => {
    if (!referralUser) {
      setReferralCode(referral_code);
    }
  };

  return (
    <SideCaptionImagePage
      imageUrl="https://res.cloudinary.com/festivalpass/image/upload/q_auto/v1568380478/fp-content/onboarding-1_mr6s3s.png"
      captionText={t('registerPage.bannerSubtitle')}
    >
      <S.Container className="col-xs-12 col-sm-offset-2 col-sm-8 col-md-offset-1 col-md-4">
        <SideImageFormPageStyles.FormWrapper>
          <SideImageFormPageStyles.Header className="row">
            <SideImageFormPageStyles.SmallTxt>
              {t('registerPage.header')} &nbsp;
            </SideImageFormPageStyles.SmallTxt>
            <Link to={loginPagePath}>
              <SideImageFormPageStyles.SmallBtn>
                {t('common.login')}
              </SideImageFormPageStyles.SmallBtn>
            </Link>
          </SideImageFormPageStyles.Header>

          <SideImageFormPageStyles.Subheader>
            <SideImageFormPageStyles.Title>{t('registerPage.title')}</SideImageFormPageStyles.Title>
            <SideImageFormPageStyles.Subtitle>
              {t('registerPage.subtitle')}
            </SideImageFormPageStyles.Subtitle>
          </SideImageFormPageStyles.Subheader>

          <Formik
            onSubmit={onSubmit}
            initialValues={initialValues}
            validationSchema={Yup.object().shape({
              first_name: Yup.string().required(t('common.required')),
              last_name: Yup.string().required(t('common.required')),
              email: Yup.string()
                .email(t('common.emailField.errorMessages.email'))
                .required(t('common.emailField.errorMessages.required')),
              password: Yup.string().required(t('common.required')),
              zipcode: Yup.string().nullable(),
              gift_code: Yup.string().nullable(),
              referral_code: Yup.string().nullable(),
            })}
          >
            {({ isSubmitting, dirty, values }: FormikProps<RegisterFormValues>) => (
              <Form>
                <S.TwoColumnRowWrapper className="row">
                  <S.TwoColumnInputWrapper className="col-xs-12 col-sm-6">
                    <Field
                      label={t('common.firstName')}
                      disabled={isSubmitting}
                      name="first_name"
                      type="text"
                      component={SideImageFormPageStyles.Input}
                      placeholder={t('common.placeholders.firstName')}
                      darkMode
                    />
                  </S.TwoColumnInputWrapper>
                  <S.TwoColumnInputWrapper className="col-xs-12 col-sm-6">
                    <Field
                      label={t('common.lastName')}
                      disabled={isSubmitting}
                      name="last_name"
                      type="text"
                      component={SideImageFormPageStyles.Input}
                      placeholder={t('common.placeholders.lastName')}
                      darkMode
                    />
                  </S.TwoColumnInputWrapper>
                </S.TwoColumnRowWrapper>

                <Field
                  label={t('common.emailField.label')}
                  disabled={isSubmitting}
                  name="email"
                  type="text"
                  component={SideImageFormPageStyles.Input}
                  placeholder={t('common.emailField.placeholder')}
                  darkMode
                />

                <Field
                  label={t('common.password')}
                  disabled={isSubmitting}
                  type="password"
                  name="password"
                  component={SideImageFormPageStyles.Input}
                  placeholder={t('common.enterPassword')}
                  darkMode
                />

                <S.TwoColumnRowWrapper className="row">
                  <S.TwoColumnInputWrapper className="col-xs-12 col-sm-6">
                    <Field
                      label={t('common.zipcode')}
                      disabled={isSubmitting}
                      name="zipcode"
                      type="text"
                      component={SideImageFormPageStyles.Input}
                      placeholder={t('common.zipcode')}
                      darkMode
                    />
                  </S.TwoColumnInputWrapper>
                  <S.TwoColumnInputWrapper className="col-xs-12 col-sm-6">
                    <Field
                      label={t('common.referralLabel')}
                      disabled={isSubmitting}
                      name="referral_code"
                      type="text"
                      component={SideImageFormPageStyles.Input}
                      placeholder={t('common.referralPlaceholder')}
                      darkMode
                      validate={validateReferralUser}
                    />
                  </S.TwoColumnInputWrapper>
                </S.TwoColumnRowWrapper>

                {gc && (
                  <Field
                    label={t('common.giftCode')}
                    disabled={isSubmitting}
                    name="gift_code"
                    type="text"
                    component={SideImageFormPageStyles.Input}
                    placeholder={t('common.giftCode')}
                    darkMode
                  />
                )}

                <Btn type="submit" isLoading={isSubmitting} label={t('common.continueEmail')} />

                {dirty && registerFailed && (
                  <SideImageFormPageStyles.FormValidation id="form-validation">
                    {errorMessage || t('eventForms.general.somethingWentWrong')}
                  </SideImageFormPageStyles.FormValidation>
                )}
              </Form>
            )}
          </Formik>

          <SideImageFormPageStyles.TermsTxt>
            {t('loginPage.footer')}{' '}
            <Link to="/terms" target="_blank">
              {t('common.termsOfService')}
            </Link>{' '}
            {t('common.and')}{' '}
            <Link to="/privacy" target="_blank">
              {t('common.privacyPolicy')}
            </Link>
          </SideImageFormPageStyles.TermsTxt>
        </SideImageFormPageStyles.FormWrapper>
      </S.Container>
    </SideCaptionImagePage>
  );
};

export default RegisterPage;

//
// Utils
//

interface RegisterFormValues {
  first_name: string;
  last_name: string;
  email: string;
  password: string;
  zipcode: string;
  gift_code: string;
  personalized_newsletter_optIn: boolean;
  country_code: string;
  ip_address: string;
  referredBy: number;
}
